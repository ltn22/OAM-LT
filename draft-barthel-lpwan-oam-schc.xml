<?xml version='1.0' encoding='utf-8'?>
<!-- This template is for creating an Internet Draft using xml2rfc,
    which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
    please see http://xml.resource.org/authoring/README.html. -->
<rfc
      xmlns:xi="http://www.w3.org/2001/XInclude"
      category="info"
      docName="draft-barthel-lpwan-oam-schc-04"
      ipr="trust200902"
      obsoletes=""
      updates=""
      submissionType="IETF"
      xml:lang="en"
      tocInclude="true"
      tocDepth="4"
      symRefs="true"
      sortRefs="true"
      version="3">
  <!-- xml2rfc v2v3 conversion 2.38.1 -->
  <!-- category values: std, bcp, info, exp, and historic
    ipr values: trust200902, noModificationTrust200902, noDerivativesTrust200902,
       or pre5378Trust200902
    you can add the attributes updates="NNNN" and obsoletes="NNNN" 
    they will automatically be output with "(if approved)" -->

 <!-- ***** FRONT MATTER ***** -->

<front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
        full title is longer than 39 characters -->

  <title abbrev="SCHC OAM for LPWAN">OAM for LPWAN using Static Context Header Compression (SCHC)</title>
  <seriesInfo name="Internet-Draft" value="draft-barthel-lpwan-oam-schc-03"/>

  <!-- add 'role="editor"' below for the editors if appropriate -->
  <!--author fullname="Dominique Barthel" initials="D." role="editor" surname="Barthel"-->
  <author fullname="Dominique Barthel" initials="D." surname="Barthel">
    <organization>Orange SA</organization>
    <address>
      <postal>
        <street>28 chemin du Vieux Chene</street> <street>BP 98</street>
        <!-- Reorder these if your country does things differently -->
        <city>Meylan Cedex</city>
        <code>38243</code>
        <country>France</country>
      </postal>
      <email>dominique.barthel@orange.com</email>
    </address>
  </author>

  <author fullname="Laurent Toutain" initials="L." surname="Toutain">
    <organization>IMT Atlantique</organization>
    <address>
      <postal>
        <street>2 rue de la Chataigneraie</street> <street>CS 17607</street>
        <city>Cesson-Sevigne Cedex</city>
        <code>35576</code>
        <country>France</country>
      </postal>
      <email>laurent.toutain@imt-atlantique.fr</email>
    </address>
  </author>

  <author fullname="Arunprabhu Kandasamy" initials="A." surname="Kandasamy">
    <organization>Acklio</organization>
    <address>
      <postal>
        <street>1137A avenue des Champs Blancs</street>
        <city>Cesson-Sevigne Cedex</city>
        <code>35510</code>
        <country>France</country>
      </postal>
      <email>arun@ackl.io</email>
    </address>
  </author>

  <author fullname="Diego Dujovne" initials="D." surname="Dujovne">
    <organization>Universidad Diego Portales</organization>
    <address>
      <postal>
        <street>Vergara 432</street>
        <city>Santiago</city>
        <code></code>
        <country>Chile</country>
      </postal>
      <email>diego.dujovne@mail.udp.cl</email>
    </address>
  </author>

  <author fullname="Juan Carlos Zuniga" initials="JC." surname="Zuniga">
    <organization>Cisco</organization>
    <address>
      <postal>
        <street></street>
        <city>Montreal QC</city>
        <code></code>
        <country>Canada</country>
      </postal>
      <email>juzuniga@cisco.com</email>
    </address>
  </author>

  <date year="2022"/>

  <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
        in the current day for you. If only the current year is specified, xml2rfc will fill 
	in the current day and month for you. If the year is not the current one, it is 
	necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	specify just the year. -->

  <!-- Meta-data Declarations -->

  <area>Internet</area>
  <workgroup>lpwan Working Group</workgroup>
  <!-- WG name at the upperleft corner of the doc,
        IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
        which is used by the RFC Editor as a nod to the history of the IETF. -->

  <keyword>template</keyword>
  <!-- Keywords will be incorporated into HTML output
        files in a meta tag but they have no effect on text or nroff
        output. If you submit your draft to the RFC Editor, the
        keywords will be used for the search engine. -->

  <abstract>
    <t>With IP protocols now generalizing to constrained networks, users expect to be able to Operate, Administer and Maintain the latter 
    with the familiar tools and protocols they already use on less constrained networks.</t>

    <t>OAM uses specific messages sent into the data plane to measure some parameters of a network.
    Most of the time, no explicit values are sent is these messages.
    Network parameters are obtained from the analysis of these specific messages.</t>

    <t>This can be used:</t>

    <ul>
      <li>To detect if a host is up or down.</li>
      <li>To measure the Round Trip Time (RTT) and its variation over time.</li>
      <li>To learn the path used by packets to reach a destination.</li>
    </ul>

    <t>OAM in LPWAN is a little bit trickier since the bandwidth is limited and
    extra traffic added by OAM can introduce perturbation on regular data transmission.</t>

    <t>Two scenarios can be investigated:</t>

    <ul>
      <li>OAM coming from the internet: As much as possible, the Network Gateway (NGW) should act as a proxy and handle the OAM traffic specifically.</li>
      <li>OAM coming from LPWAN devices: This can be considered as regular devices but some specific devices may be installed in the LPWAN network to measure its quality.</li>
    </ul>

    <t>The primitive functionalities of OAM are achieved with the ICMPv6 protocol.</t>

    <t>ICMPv6 defines messages that inform the source of IPv6 packets about errors that happened during packet delivery.
    It also defines the Echo Request/Reply messages that are used for basic network troubleshooting (ping command).
    ICMPv6 messages are transported on IPv6.</t>

    <t>This document describes
    how basic OAM is performed on Low Power Wide Area Networks (LPWANs)
    by compressing ICMPv6/IPv6 headers
    and by protecting the LPWAN network and the Device from undesirable ICMPv6 traffic.</t>

  </abstract>
</front>

<middle>
<section anchor="introduction" numbered="true" toc="default">
<name>Introduction</name>

<t>The primitive functionalities of OAM <xref target="RFC6291"/> are achieved with the ICMPv6 protocol.</t>

<t>ICMPv6 <xref target="RFC4443"/> is a companion protocol to IPv6 <xref target="RFC8200"/>.</t>

<t><xref target="RFC4443"/> defines a generic message format.
This format is used for messages to be sent back to the source of an IPv6 packet to inform it about errors during packet delivery.</t>

<t>More specifically, <xref target="RFC4443"/> defines 4 error messages:
Destination Unreachable, Packet Too Big, Time Exceeded and Parameter Problem.</t>

<t><xref target="RFC4443"/> also defines the Echo Request and Echo Reply messages, which provide support for the ping application.</t>

<t>Other ICMPv6 messages are defined in other RFCs, such as an extended format of the same messages <xref target="RFC4884"/>
and other messages used by the Neighbor Discovery Protocol <xref target="RFC4861"/>.</t>

<t>This document focuses on using Static Context Header Compression (SCHC) <xref target="RFC8724"/> to compress <xref target="RFC4443"/> messages that need to be transmitted over the LPWAN network, and on having the LPWAN gateway proxying the Device to save it the unwanted traffic.</t>

<t>LPWANs’ salient characteristics are described in <xref target="RFC8376"/>.</t>
</section>

<section anchor="terminology" numbered="true" toc="default">
<name>Terminology</name>

<t>This draft re-uses the Terminology defined in <xref target="RFC8724"/>.</t>

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, 
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, 
and “OPTIONAL” in this document are to be interpreted as 
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they 
appear in all capitals, as shown here.</t>

</section>

<section anchor="use-cases">
<name>Use cases</name>

<t>In the LPWAN architecture, we can distinguish the following cases:</t>

<ul spacing="normal">
  <li>the Device is the originator of an Echo Request message, and therefore the destination of the Echo Reply message.</li>
  <li>the Device is the destination of an Echo Request message, and therefore the purported source of an Echo Reply message.</li>
  <li>there is no Device matching the destination address of an incoming IPv6 packet (traveling downward).
	  TODO: should the SCHC C/D act as a router and send back an ICMP error message (Destination Unreachable)? Which source address should it use?</li>
  <li>the Device is the actual source of an ICMP error message in response to an incorrect incoming IPv6 message that was forwarded to it over the LPWAN.
	  In this case, we may want to compress the ICMP error message for transmission over the LPWAN.</li>
  <li>the Device is the purported source of an ICMP error message, mainly in response to an incorrect incoming IPv6 packet from the internet.
	  In this case, as much as possible, the core SCHC C/D should act as a proxy and originate the ICMP message,
	  so that the Device and the LPWAN network are protected from this unwanted traffic.</li>
  <li>the Device is the destination of the ICMP message, mainly in response to a
	  packet sent by the Device, where the packet generates an error in the network. In this case, we want the ICMP message to reach the Device.</li>
</ul>

<t>These cases are further described in <xref target="DetailedBehavior"/>.</t>

</section>

<section anchor="DetailedBehavior" title="Detailed behavior">

<section anchor="DevicePings" title="Device does a ping">

<t>If a ping request is generated by a Device, then SCHC compression applies.</t>

<t>The format of an ICMPv6 Echo Request message is described in <xref target="Fig-ICMPv6-Echo-Request"/>, with Type=128 and Code=0.</t>

<figure title="ICMPv6 Echo Request message format" anchor="Fig-ICMPv6-Echo-Request"><artwork><![CDATA[
       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |     Type      |     Code      |          Checksum             |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |           Identifier          |        Sequence Number        |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |     Data ...
      +-+-+-+-+-

]]></artwork></figure>

<t>If we assume that one rule will be devoted to compressing Echo Request messages, then Type and Code are known in the rule to be 128 and 0 and can therefore be elided with the not-sent CDA.</t>

<t>Checksum can be reconstructed with the compute-checksum CDA and therefore is not transmitted.</t>

<t><xref target="RFC4443"/> states that Identifier and Sequence Number are meant to
“aid in matching Echo Replies to this Echo Request” and that they “may be zero”.
Data is “zero or more bytes of arbitrary data”.</t>

<t>Assuming that a constrained IoT device will only run one Ping process at a time,
we recommend that Identifier be zero, Sequence Number be a counter on 3 bits, and Data be zero bytes (i.e., absent).
Therefore, Identifier is elided with the not-sent CDA, Sequence Number is transmitted on 3 bits with the LSB CDA and no Data is transmitted.</t>

<t>The transmission cost of the Echo Request message is therefore the size of the RuleID + 3 bits.</t>

<t>When the destination receives the Echo Request message, it will respond back with an Echo Reply message.
This message bears the same format as the Echo Request message but with Type = 129
(see <xref target="Fig-ICMPv6-Echo-Request"/>).</t>

<t><xref target="RFC4443"/> states that the Identifier, Sequence Number and Data fields of the Echo Reply message shall contain the same values as the invoking Echo Request message.
Therefore, a rule shall be used similar to that used for compressing the Echo Request message.</t>

<section anchor="rule-example" title="Rule example">

<t><xref target="Fig-ping-up"/> provides an example of SCHC compression of an uplink Echo Reply and of the corresponding downlink Echo Reply.
Even with a single Rule for both directions, the type can be elided in both directions, thanks to the Direction indicator in the Field Descriptor.
Identifier is ignored and regenerated as 0 at decompression.
This implies that only one single ping can be launched at any given time on a Device.
Finally, only the least significant 3 bits of the Sequence Number are sent on the LPWAN,
allowing for a serie of 8 consecutive pings.</t>

<table anchor="Fig-ping-up" align="center">
  <name>Example of compression rule for a ping from the device to the internet</name>
  <thead>
    <tr>
      <th align="left">Field</th>
      <th align="left">FL</th>
      <th align="left">FP</th>
      <th align="left">DI</th>
      <th align="left">Value</th>
      <th align="left">Matching Operator</th>
      <th align="left">CDA</th>
      <th align="left"></th>
      <th align="left">Sent bits</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align="left">ICMPv6 Type</td>
      <td align="left">8</td>
      <td align="left">1</td>
      <td align="left">Up</td>
      <td align="left">128</td>
      <td align="left">equal</td>
      <td align="left">not-sent</td>
      <td align="left"></td>
      <td align="left"></td>
    </tr>
    <tr>
      <td align="left">ICMPv6 Type</td>
      <td align="left">8</td>
      <td align="left">1</td>
      <td align="left">Dw</td>
      <td align="left">129</td>
      <td align="left">equal</td>
      <td align="left">not-sent</td>
      <td align="left"></td>
      <td align="left"></td>
    </tr>
    <tr>
      <td align="left">ICMPv6 Code</td>
      <td align="left">8</td>
      <td align="left">1</td>
      <td align="left">Bi</td>
      <td align="left">0</td>
      <td align="left">equal</td>
      <td align="left">not-sent</td>
      <td align="left"></td>
      <td align="left"></td>
    </tr>
    <tr>
      <td align="left">ICMPv6 Checksum</td>
      <td align="left">16</td>
      <td align="left">1</td>
      <td align="left">Bi</td>
      <td align="left">0</td>
      <td align="left">ignore</td>
      <td align="left">compute-*</td>
      <td align="left"></td>
      <td align="left"></td>
    </tr>
    <tr>
      <td align="left">ICMPv6 Identifier</td>
      <td align="left">16</td>
      <td align="left">1</td>
      <td align="left">Bi</td>
      <td align="left">0</td>
      <td align="left">ignore</td>
      <td align="left">not-sent</td>
      <td align="left"></td>
      <td align="left"></td>
    </tr>
    <tr>
      <td align="left">ICMPv6 Sequence</td>
      <td align="left">16</td>
      <td align="left">1</td>
      <td align="left">Bi</td>
      <td align="left">0</td>
      <td align="left">MSB(13)</td>
      <td align="left">LSB</td>
      <td align="left"></td>
      <td align="left">3</td>
    </tr>
  </tbody>
</table>

</section>
</section>

<section anchor="device-is-pinged" title="Device is ping'ed">

<t>If the Device is ping’ed (i.e., is the destination of an Echo Request message), the default behavior is to avoid
propagating the Echo Request message over the LPWAN.</t>

<!--This is the recommended behavior with the Code 0 (default value) of the Echo Request message.-->

<t>This is done by proxying the ping request on the core SCHC C/D.
This requires adding an action when the Rule is selected.
Instead of been processed by the compressor, the packet description is processed by a ping proxy.
The Rule is only used for the selection, therefore CDAs are not necessary.</t>

<t>The resulting behavior is shown on <xref target="Fig-ICMPv6-ping"/>.</t>

<figure title="Examples of ICMPv6 Echo Request/Reply" anchor="Fig-ICMPv6-ping"><artwork><![CDATA[
     Device       NGW     core SCHC C/D                 Internet Host

       |           |            |    Echo Request, Code=0    |
       |           |            |<---------------------------|
       |           |            |                            |
       |           |            |--------------------------->|
       |           |            |    Echo Reply,   Code=0    |


]]></artwork></figure>

<!--* Code = 0: The Echo Request message is not propagated on the LPWAN to the Device. If the SCHC C/D finds a rule in the context with the IPv6 address of the Device, it responds with an Echo Reply on behalf of the Device. If no rule is found with that IPv6 address, the SCHC C/D does not respond.

TODO: again, we are assuming that no compression rule is equivalent to the device not providing the service. -->

<section anchor="rule-example-1" title="Rule example">

<t>The following rule shows an example of a proxying rule for a device being ping'ed.</t>

<table anchor="Fig-ping-down" align="center">
  <name>Example of a proxying rule for a device being ping'ed.</name>
  <thead>
    <tr>
      <th align="left">Action</th>
      <td align="left" colspan= "8">Ping Proxy</td>
    </tr>
    <tr>
      <th align="left">Field</th>
      <th align="left">FL</th>
      <th align="left">FP</th>
      <th align="left">DI</th>
      <th align="left">Value</th>
      <th align="left">Matching Operator</th>
      <th align="left">CDA</th>
      <th align="left"></th>
      <th align="left">Sent bits</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align="left">ICMPv6 Type</td>
      <td align="left">8</td>
      <td align="left">1</td>
      <td align="left">Dw</td>
      <td align="left">128</td>
      <td align="left">equal</td>
      <td align="left"></td>
      <td align="left"></td>
      <td align="left"></td>
    </tr>
    <tr>
      <td align="left">ICMPv6 Code</td>
      <td align="left">8</td>
      <td align="left">1</td>
      <td align="left">Bi</td>
      <td align="left">0</td>
      <td align="left">equal</td>
      <td align="left"></td>
      <td align="left"></td>
      <td align="left"></td>
    </tr>
    <tr>
      <td align="left">ICMPv6 Checksum</td>
      <td align="left">16</td>
      <td align="left">1</td>
      <td align="left">Bi</td>
      <td align="left">0</td>
      <td align="left">ignore</td>
      <td align="left"></td>
      <td align="left"></td>
      <td align="left"></td>
    </tr>
    <tr>
      <td align="left">ICMPv6 Identifier</td>
      <td align="left">16</td>
      <td align="left">1</td>
      <td align="left">Bi</td>
      <td align="left">0</td>
      <td align="left">ignore</td>
      <td align="left"></td>
      <td align="left"></td>
      <td align="left"></td>
    </tr>
    <tr>
      <td align="left">ICMPv6 Sequence</td>
      <td align="left">16</td>
      <td align="left">1</td>
      <td align="left">Bi</td>
      <td align="left">0</td>
      <td align="left">ignore</td>
      <td align="left"></td>
      <td align="left"></td>
      <td align="left"></td>
    </tr>
  </tbody>
</table>

</section>
</section>

<section anchor="NoDestination" title="No Device matches the destination address of IPv6 packet coming from the internet">

<t>TODO: should the SCHC C/D respond with a Destination Unreachable Error Message? With what source address?
This would make it look like a router, which we have tried to avoid in all other situations.</t>
	
<t>PROPOSED TEXT: In that case, the SCHC C/D acts as a router and MUST have a routable IPv6 address to generate
an ICMPv6 message.
* If no Device matches the IPv6 prefix, a No Route to Destination ICMPv6 message (type 0, code 0) may be generated.
* If at least a Device matching the IPv6 prefix is found, but no devIID matches, an Address Unreachable ICMPv6 message (type 0, code 3) may be generated.
</t>

</section>

<section anchor="ProxyErrMsg" title="Device is the source of an ICMPv6 error message">

<t>As stated in <xref target="RFC4443"/>, a node should generate an ICMPv6 message in response to an
IPv6 packet that is malformed or that cannot be processed due to some incorrect field value.</t>

<t>The general intent of this document is to spare both the Device and the LPWAN network this un-necessary traffic.
As much as possible, the incorrect packets should be caught at the core SCHC C/D and the ICMPv6 notification should be sent back from there, impersonating the Device.</t>

<figure title="Example of ICMPv6 error message sent back to the Internet" anchor="Fig-ICMPv6-up"><artwork><![CDATA[
     Device       NGW     core SCHC C/D                 Internet Host

       |           |            |    Destination Port=XXX    |
       |           |            |<---------------------------|
       |           |            |                            |
       |           |            |--------------------------->|
       |           |            | ICMPv6 Port Unreachable    |
       |           |            |                            |
       |           |            |                            |


]]></artwork></figure>

<t><xref target="Fig-ICMPv6-up"/> shows an example of an IPv6 packet trying to reach a Device. Let’s assume that the port number used
as destination port is not “known” (TODO: needs better definition) from the core SCHC C/D. Instead of sending the packet over
the LPWAN and having this packet rejected by the Device, the core SCHC C/D issues
an ICMPv6 error message “Destination Unreachable” (Type 1) with Code 1 (“Port Unreachable”) on behalf of the Device.</t>
<t>See <xref target="traceroute"/> for a use of this feature in the traceroute use case.</t>

<t>TODO: describe the situations where the SCHC C/D can actually ancitipate the response of the Device and act as a proxy.
The default SCHC behavior is to forward uncompressed all packets it does not have a matching compression Rule for, so what can it know in order to anticipate?
</t>

<!--
<t>In that case the SCHC C/D acts as a router and MUST have a routable IPv6 address to generate
an ICMPv6 message. when compressing a packet containing an IPv6 header, no compression rules are found and:
* if a rule contains some extension headers, a parameter problem may be generated (type 4),
* no rules contains the IPv6 prefix, a no route to destination ICMPv6  message (type 0, code 0) may be generated,
* a prefix is found, but no devIID matches, a address unreachable ICMPv6  message (type 0, code 3) may be generated,
* a device IPv6 address is found, but no port matches,  a port unreachable ICMPv6  message (type 0, code 4) may be generated,</t>

<t>TODO: This assumes that all ports that the Device listens to will be matched by a SCHC rule. Is this the basic assumption of SCHC that all packets that do not match a rule are rejected? If yes, why do have fragmentation also for uncompressed packets?</t>

<t>TODO: discuss the various Type/Code that are expected to be generated in response to various errors.</t>
-->

<t>TODO: describe the compression of the ICMPv6 error message coming back from the Device for IPv6 packets that were actually forwarded to it downlink over the LPWAN.</t>

</section>

<section anchor="device-is-the-destination-of-an-icmpv6-error-message" title="Device is the destination of an ICMPv6 error message">

<t>In this situation, we assume that a Device has been configured to send information to a server on the Internet. If this
server becomes no longer accessible, an ICMPv6 message will be generated back towards the Device by an intermediate router.
This information can be useful to the Device, for example for reducing the reporting rate in case of periodic reporting of data.
Therefore, we compress the ICMPv6 message using SCHC and forward it to the Device over the LPWAN.</t>

<figure title="Example of ICMPv6 error message sent back to the Device" anchor="Fig-ICMPv6-down"><artwork><![CDATA[
     Device       NGW     core SCHC C/D                Internet Server

       |           |            |                            |
       | SCHC compressed IPv6   |                            |
       |~~~~~~~~~~~|----------->|----------------------X     |
       |           |            | <---------------------     |
       |<~~~~~~~~~~|------------| ICMPv6 Host unreachable    |
       |SCHC compressed ICMPv6  |                            |
       |           |            |                            |
       |           |            |                            |


]]></artwork></figure>

<t><xref target="Fig-ICMPv6-down"/> illustrates this behavior. The ICMPv6 error message is compressed
as described in <xref target="ErrMsgCompr"/> and forwarded over the LPWAN to the Device.</t>

<section anchor="ErrMsgCompr" title="ICMPv6 error message compression.">

<t>The ICMPv6 error messages defined in <xref target="RFC4443"/> contain the fields shown in
<xref target="Fig-ICMP-error"/>.</t>

<figure title="ICMPv6 Error Message format" anchor="Fig-ICMP-error"><artwork><![CDATA[
       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |     Type      |     Code      |          Checksum             |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                            Value                              |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                    As much of invoking packet                 |
      +                as possible without the ICMPv6 packet          +
      |                exceeding the minimum IPv6 MTU                 |

]]></artwork></figure>

<t><xref target="RFC4443"/> states that Type can take the values 1 to 4, and Code can be set to values between 0 and 6.
Value is unused for the Destination Unreachable and Time Exceeded messages.
For the Packet Too Big message, it contains the MTU.
For the Parameter Error message, it containts a pointer to the byte causing the error.
Therefore, Value is never expected to be greater than 1280 in LPWAN networks.</t>

<t>The following generic rule can therefore be used to compress all ICMPv6 error messages as defined today.
More specific rules can also be defined to achieve better compression of some error messages.</t>

<t>The Type field can be associated to a matching list [1, 2, 3, 4] and is therefore compressed down to 2
bits. Code can be reduced to 3 bits using the LSB CDA. Value can be sent on 11 bits using the LSB
CDA, but if the Device is known to send smaller packets, then the size of this field can
be further reduced.</t>

<t>By <xref target="RFC4443"/>, the rest of the ICMPv6 message must contain as much as possible of the IPv6 offending (invoking) packet that triggered
this ICMPv6 error message. This information is used to try and identify the SCHC rule that
was used to decompress the offending IPv6 packet. If the rule can be found then the Rule Id
is added at the end of the compressed ICMPv6 message. Otherwise the compressed
packet ends with the compressed Value field.</t>

<t><xref target="RFC4443"/> states that the “ICMPv6 error message MUST include as much
of the IPv6 offending (invoking) packet … as possible”.
In order to comply with this requirement, if there is enough information in the incoming ICMPv6 message for the core SCHC C/D to
identify the rule that has been used to decompress the erroneous IPv6 packet, this Rule Id must be
sent in the compressed ICMPv6 message to the Device.</t>

<t>TODO: the erroneous IPv6 packet header (not just the Rule Id) should be sent back. This includes the Rule Id and the compression residue. This means the SCHC C/D uses the context backwards (in the reverse direction). How does the Device know it must also use the context backwards?</t>

<t>TODO: how does one know that the “payload” of a compressed-header packet is in fact another compressed header?</t>

</section>
</section>
</section>

<section anchor="traceroute" title="Traceroute">

<t>The traceroute6 program sends successive probe packets destined to a chosen target
but with the Hop Limit value successively incremented from the initial value 1.</t>

<t>It expects to receive a “Time Exceeded” (Type = 3) “Hop Limit” (Code = 0) ICMPv6 error message back from the successive routers along the path to the destination.</t>

<t>The probe packet is usually a UDP datagram, but can also be a TCP datagram or even an ICMPv6 message.
The destination port is chosen in the unassigned range in hope that the destination, when eventually reached,
will respond with a “Destination Unreachable” (Type = 1) “Port Unreachable” (Code = 4) ICMPv6 error message.</t>

<t>It is not anticipated that a Device will want to traceroute a destination on the Internet.</t>

<t>By contrast, a host on the Internet may attempt to traceroute an IPv6 address that is assigned to an LPWAN device. This is described in <xref target="Fig-traceroute"/>.</t>

<figure title="Example of traceroute to the LPWAN Device" anchor="Fig-traceroute"><artwork><![CDATA[
     Device       NGW     core SCHC C/D                 Internet 

       |           |            | Hop Limit=1, Dest Port=XXX |
       |           |            |<---------------------------|
       |           |            |                            |
       |           |            |--------------------------->|
       |           |            |  ICMPv6 Port Unreachable   |


]]></artwork></figure>

<t>When the probe packet first reaches the core SCHC C/D, its remaining Hop Limit is 1.
The core SCHC C/D will,
as explained in <xref target="ProxyErrMsg"/>, answer back with a “Destination Unreachable” (Type = 1) “Port Unreachable” (Code = 4) ICMPv6 error message.
This is what the traceroute6 command expects.
Therefore, the traceroute6 command will work with LPWAN IPv6 destinations, except for the time displayed for the destination, which is actually the time to its proxy.</t>

<t>However, if the probe packet happens to hit a port that matches a SCHC rule for that Device, the packet will be compressed with this rule and sent over the LPWAN, which is unfortunate.
Forwarding of packets to the Device over the LPWAN should only be done from authenticated/trusted sources anyway.
Rate-limitation on top of authentication will mitigate this nuisance.</t>

</section>

<section anchor="data-model" title="Data Model Extensions">
<t>To allow ping proxying, the Rule should contain an Action entry indicating what proxy to invoke when receiving a matching packet.
Proxying Rules MUST allow empty CDA fields.
The data model MUST include identifiers for ICMPv6 header fields (Type, Code, Checksum, Identifier, Sequence).
</t>

<t>TODO: insert reference to the data model draft</t>

</section>

<section anchor="security-considerations" title="Security considerations">

<t>TODO</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>TODO</t>

</section>

</middle>

<!--  *****BACK MATTER ***** -->
<back>
<!-- References split into informative and normative -->

<!-- There are 2 ways to insert reference entries from the citation libraries:
  1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
  2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
     (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

  Both are cited textually in the same manner: by using xref elements.
  If you use the PI option, xml2rfc will, by default, try to find included files in the same
  directory as the including file. You can also define the XML_LIBRARY environment variable
  with a value containing a set of directories to search.  These can be either in the local
  filing system or remote ones accessed by http (http://domain/dir/... ).-->

  <references>
    <name>References</name>
    <references>
      <name>Normative References</name>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.4443.xml"?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.4861.xml"?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.4884.xml"?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.6291.xml"?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8174.xml"?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8200.xml"?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8724.xml"?>
    </references>

    <references>
      <name>Informative References</name>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8376.xml"?>
    </references>

<!-- the following is the minimum to make xml2rfc happy
      <reference anchor="min_ref">
        <front>
          <title>Minimal Reference</title>
          <author initials="authInitials" surname="authSurName">
              <organization/>
          </author>
          <date year="2006"/>
        </front>
      </reference>

-->
</references>

<!-- Appendix
<section anchor="app-additional" numbered="true" toc="default">
  <name>Additional Stuff</name>
  <t>This becomes an Appendix.</t>
</section>
-->

</back>
</rfc>
